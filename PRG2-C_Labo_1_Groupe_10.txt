/*
-----------------------------------------------------------------------------------
Nom du fichier :  main.c
Nom du labo    :  Laboratoire no. 1
Auteur(s)      :  Patrick Furrer, Timothee Van Hove
Date creation  :  25 avril 2022
description    :  Generer une planche de Galton et simuler le passage de chaque
                  bille au travers. Afficher le representation de la planche de
                  galton avec des compteurs qui s'incrementent au passage de
                  chaque bille. Afficher un histogramme representant la
                  distribution des billes dans les derniers compteurs

Remarque(s)    :  - Toutes les saisies utilisateur sont controlees. L'utilisateur
                  doit entrer (valeur numerique) un nombre de billes  entre
                  [1000, 30000], et un nombre d'etages entre [10, 20].
                  - Le programme se termine automatiquement apres l'affichage de
                  l'histogramme

Compilateur    : mingw-w64 gcc 11.2.0
-----------------------------------------------------------------------------------
 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <inttypes.h>

const uint16_t MIN_BILLE = 1000, MAX_BILLE = 30000, MIN_RANGEE = 10, MAX_RANGEE = 20,
   RESOLUTION_HISTO = 15, TAILLE_BUFFER = 128;
const char* MSG_BILLES = "Entrez le nombre de billes";
const char* MSG_RANGEES = "Entrez le nombre de rangees de compteurs";

//Vide le buffer stdin
void viderStdin(void);

//Calcul le nombre de nbCompteurs sur la planche
uint16_t nbCompteurs(uint16_t nbEtage);

//Lis l'entree utilisateur et renvoie la valeur lue si l'entree est valide si non,
//invite l'utilisateur a recommencer avec un message d'erreur
uint16_t lectureEntree(const char* msg, uint16_t min, uint16_t max);

//Incremente les compteurs en fonction du parcours de la bille
void parcoursBille(uint16_t* tab, uint16_t nbEtage);

//Affiche les compteurs de la planche de Galton (chaque compteurs). Fait varier
//l'espace avant les compteurs de 1 (1 ligne / 2) si nbBilles a une nombre de
// chiffres pair
void imprimerCompteurs(const uint16_t* tabCompteur, uint16_t nbEtages);

//Affiche l'histogramme de la distribution du nombre de billes dans les
//compteurs du dernier etage
void imprimerHistogramme(const uint16_t* tabCompteur, uint16_t nbEtages);

//Retourne le nombre de chiffres dans un nombre non signe
uint16_t longueurNbre(uint16_t nombre);

//Retourne 1 si le nombre est pair, si non 0
uint16_t estPair(uint16_t nombre);

//Donne la valeur max dans un tableau (ou une partie)
uint16_t valeurMax(const uint16_t* tab, size_t taille);

int main(void) {
   //Amorcer le generateur aleatoire (distribution differente a chaque execution)
   srand((uint16_t) time(NULL));

   //Entrees utilisateur
   uint16_t nbBilles = lectureEntree(MSG_BILLES, MIN_BILLE, MAX_BILLE);
   uint16_t nbEtages = lectureEntree(MSG_RANGEES, MIN_RANGEE, MAX_RANGEE);

   //Allocation du tableau des compteurs
   uint16_t *tabCompteur = calloc(nbCompteurs(nbEtages), sizeof(uint16_t));
   if (tabCompteur == NULL) {
      printf("Plus de memoire disponible\n Arret du programme");
      return EXIT_FAILURE;
   }
   //Simulation du parcours de la bille
   for (uint16_t bille = 0; bille < nbBilles; ++bille) {
      parcoursBille(tabCompteur, nbEtages);
   }

   //Affichage des compteurs et de l'histogramme
   imprimerCompteurs(tabCompteur, nbEtages);
   printf("\n");
   imprimerHistogramme(tabCompteur, nbEtages);

   //Liberer la memoire allouee
   free(tabCompteur);
   return EXIT_SUCCESS;
}

void viderStdin(void) {
   int c;
   while ((c = getchar()) != '\n' && c != EOF);
}

uint16_t lectureEntree(const char* msg, uint16_t min, uint16_t max) {
   int echec;
   uint16_t entree = 0;
   do {
      echec = 0;
      printf("%s [%"PRIu16" - %"PRIu16"] : ", msg, min, max);
      //Creer 2 buffers de 128 Bytes pour avoir de la marge et les initialiser a 0
      char bufferTemp[TAILLE_BUFFER], bufferComp[TAILLE_BUFFER];
      memset(bufferTemp, 0, TAILLE_BUFFER);
      memset(bufferComp, 0, TAILLE_BUFFER);
      //Stocker la valeur dans le buffer #1
      scanf("%s", bufferTemp);
      viderStdin();
      //Recuperer la valeur au format uint16_t depuis le buffer #1
      sscanf(bufferTemp, "%"SCNu16, &entree);
      //Stocker la valeur au format char* dans le buffer #2
      sprintf(bufferComp, "%"PRIu16, entree);
      //Comparer les 2 buffers, recommencer s'ils sont differents
      if (strcmp(bufferTemp, bufferComp)|| entree < min || entree > max) {
         printf("%s\n", "Saisie incorrecte. Veuillez SVP recommencer.");
         echec = 1;
      }
   } while (echec);
   return entree;
}

void imprimerCompteurs(const uint16_t* tabCompteur, uint16_t nbEtages) {
   uint16_t nbChiffres = longueurNbre(tabCompteur[0]);
   //Calcul du centre de l'affichage sur la base du dernier etage de compteurs
   uint16_t nbEspaces = (nbChiffres + 1) * nbEtages / 2;
   //Calcul du centre du nombre pour centrer le compteur
   uint16_t centreCompteur = (nbChiffres + 1) / 2;
   for (uint16_t etage = 0, index = 0; etage < nbEtages; ++etage) {
      //Decrement du nbEspaces avant le compteur pour avoir un affichage symetrique
      //Si nbChiffres de billes est impair, pas besoin de faire varier 1 ligne sur 2
      nbEspaces -= (estPair(nbChiffres) && estPair(etage + 1)) + centreCompteur;
      printf("%*s ", nbEspaces, "");
      for (uint16_t colonne = 0; colonne <= etage; ++colonne, ++index) {
         printf("%*"PRIu16" ", nbChiffres, tabCompteur[index]);
      }
      printf("\n");
   }
}

void imprimerHistogramme(const uint16_t* tabCompteur, uint16_t nbEtages) {
   //Recuperer l'index du dernier etage du tableau
   uint16_t indexDernierEtage = nbCompteurs(nbEtages) - nbEtages;
   //Recuperer la valeur maximum de tous les compteurs du dernier etage
   uint16_t valMax = valeurMax(tabCompteur + indexDernierEtage, nbEtages);
   uint16_t nbChiffres = longueurNbre(tabCompteur[0]);
   for (uint16_t i = RESOLUTION_HISTO; i > 0; --i) {
      for (uint16_t j = 0; j < nbEtages; ++j) {
         char c = ' ';
         uint16_t valeurCompteur = tabCompteur[indexDernierEtage + j];
         //Calcul de la hauteur de l'histogramme pour ce compteur entre 0 et 15
         double hauteur = round(valeurCompteur * (double) RESOLUTION_HISTO / valMax);
         //Imprimer '*' ou ' '
         if (hauteur >= i)
            c = '*';
         printf(" %*c", nbChiffres, c);
      }
      printf("\n");
   }
}

uint16_t valeurMax(const uint16_t* tab, size_t taille) {
   uint16_t max = 0;
   for (size_t i = 0; i < taille; ++i) {
      if (tab[i] > max)
         max = tab[i];
   }
   return max;
}

void parcoursBille(uint16_t* tab, uint16_t nbEtages) {
   uint16_t pos = 0;
   for (uint16_t etage = 1; etage <= nbEtages; ++etage) {
      ++tab[pos];
      if (rand() % 2)
         ++pos;
      pos += etage;
   }
}

uint16_t nbCompteurs(uint16_t nbEtages) {
   //Somme arithmetique simple
   return nbEtages * (nbEtages + 1) / 2;
}

uint16_t longueurNbre(uint16_t nombre) {
   if (nombre == 0)
      return 1;
   return (uint16_t) log10(nombre) + 1;
}

uint16_t estPair(uint16_t nombre) {
   //si (nombre + 1) % 2 est different de 0, alors nombre est pair
   return (nombre + 1) % 2;
}
